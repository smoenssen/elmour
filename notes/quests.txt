

Map
QUEST_DISCOVER_LAYER
QUEST_ITEM_SPAWN_LAYER

Quest map object:
questID is the object name on the map - all objects of the same quest will have the same questID
taskID is a custom property that matches id of task in .json file

taskProperties:
TARGET_TYPE is path to .json config file (for RETURN quests or FETCH type quests on QUEST_ITEM_SPAWN_LAYER)
TARGET_LOCATION is name of map

Notes:
Remove targetLocation from QuestTask?
Usage of targetEntity:
	search for getTargetEntity
	used for KeyItem.ID for FETCH tasks
	used for Entity ID in QuestGraph::setQuestComplete and PlayerHUD::OnNotify::TASK_COMPLETE for saveLatestEntityConversationConfig
	Is it correct to set all conversation configs to POST_QUEST_DIALOG in setQuestComplete?
	In PlayerHUD::OnNotify::TASK_COMPLETE shouldn't call saveLatestEntityConversationConfig for FETCH tasks (and maybe others?)
Post task conversation type:
	When task is complete, and if there is a post task dialog, save post task dialog to profile for the NPC

Todo:
-----
Need to support spawning items after a specific quest is started.

Ben
---
Remove the following from .json files for characters:
	conversationConfigPath
	questConfigPath
	currentQuestID
Find Buttons sub-quest could be reduced to a single task with a target number of 3

To add quest
------------
Create CutSceneQuest<name> copy of CutSceneQuest1
  Update all instances of CutSceneQuest1
  Update questID
  Update ElmourGame.ScreenType.*
  Update MapFactory.MapType in show()
  Update .json file paths for conversations
ElmourGame.java
  Add private static variables
  Create new in create()
  Add to dispose()
  Add ScreenType
  Add case in getScreenType
Quest.java
	Add quest ID and json path to quests array

Map
---
	- For quests launched by interacting with NPC
		Add character spawn object on SPAWNS_LAYER
		Add "chapters" under Custom Properties - this is the chapter range for quest, e.g., 1-5
		Add "taskIDs" under Custom Properties - this is the list of quest tasks in the form <Quest ID>::<Task ID list separated by commas>
			The QuestID::TaskID lists are separated by semi-colons
			e.g., TeddyBear::FindTeddyBear,AnotherTeddyBearTask;AnotherQuestID::YetAnotherTask
	- For quests launched by discovering a map area
		Add object to MAP_QUEST_DISCOVER_LAYER
		Add "chapters" and "taskIDs" under Custom Properties (see above)
	- For HIDDEN_ITEM on HIDDEN_ITEMS_LAYER
		Add custom properties:
			id = KeyItem id
			text = text to display when item is found
			- if quest type:
				taskID = quest ID::task ID
			Note: need to reload hidden items each time map is loaded
			 		- whenever quest is started or progresses
					- whenever hidden item is found (send message to maps?)

yEd for quest conversations
---------------------------
  Use EXIT_CONVERSATION in cut scenes
  Use EXIT_CHAT in normal dialog
  Use TASK_COMPLETE in task dialog, which includes data <questID::taskID>
	Use TASK_COMPLETE_CUTSCENE in task dialog, which includes data <questID::taskID>;<map spawn location>;<map>

Character .json files
---------------------
	Remove conversationConfigPath
	Remove questConfigPath
	Add all possible conversationConfigs for quests. Possible conversation types for configs so far are:
		NORMAL_DIALOG,
		PRE_QUEST_CUTSCENE,
		QUEST_TASK_DIALOG,
		QUEST_TASK_CUTSCENE,
		ACTIVE_QUEST_DIALOG1,
		ACTIVE_QUEST_DIALOG2,
		ACTIVE_QUEST_DIALOG3,
		ACTIVE_QUEST_CUTSCENE1,
		ACTIVE_QUEST_CUTSCENE2,
		ACTIVE_QUEST_CUTSCENE3,
		RETURN_QUEST_DIALOG,
		RETURN_QUEST_CUTSCENE,
		POST_QUEST_DIALOG,
    POST_TASK_DIALOG1,
    POST_TASK_DIALOG2,
    POST_TASK_DIALOG3

Example conversationConfigs in timmy.json file:
	conversationConfigs : [
		{
			class: com.smoftware.elmour.entity.EntityConfig$ConversationConfig
			type: NORMAL_DIALOG
			config: "RPGGame/maps/Game/Text/Dialog/NormalDialog/TimmyNormalDialog.json"
			questID: TeddyBear
		}
		{
			class: com.smoftware.elmour.entity.EntityConfig$ConversationConfig
			type: PRE_QUEST_CUTSCENE
			config: "Quest1Screen_PreQuestTimmy"
			questID: TeddyBear
		}
		{
			class: com.smoftware.elmour.entity.EntityConfig$ConversationConfig
			type: ACTIVE_QUEST_DIALOG1
			config: "RPGGame/maps/Game/Text/Dialog/TeddyBear/TimmyActiveQuestDialog.json"
			questID: TeddyBear
		}
		{
			class: com.smoftware.elmour.entity.EntityConfig$ConversationConfig
			type: RETURN_QUEST_CUTSCENE
			config: "Quest1Screen_ReturnQuestTimmy"
			questID: TeddyBear
		}
		{
			class: com.smoftware.elmour.entity.EntityConfig$ConversationConfig
			type: POST_QUEST_DIALOG
			config: "RPGGame/maps/Game/Text/Dialog/TeddyBear/TimmyPostQuestDialog.json"
			questID: TeddyBear
		}
	]

yEd for quest graphs
--------------------
Color = task types
	FETCH			= cc99ff	(purple)
	KILL			= ff0000	(red)
	DELIVERY	= c0c0c0	(gray)
	GUARD			= 3366ff	(blue)
	ESCORT		= 33cccc	(turquoise)
	RETURN		= ffcc00	(gold)
	DISCOVER	= 00ff00	(green)
Text = task ID
Phrase = URL
Description will be <Target Entity>;<ConversationType>;<Post Task ConversationType>;<Target Number>
	For FETCH "Target Entity" is the KeyItem ID
	The last two are optional, but if you want a Target Number but not Post Task ConversationType, then you still need the extra semi-colon:
		e.g., OPHION;ACTIVE_QUEST_DIALOG1;;5

Quests will be Groups
URL = Quest Title
Text = Quest ID
Description = <Minimum chapter>;<Quest giver>;<Gold>;<XP>
